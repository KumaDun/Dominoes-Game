import copy
import random
import math

def create_dominoes_game(rows, cols):
    board = [[False] * cols for _ in range(rows)]
    return DominoesGame(board)


class DominoesGame(object):

    # Required
    def __init__(self, board):
        self.board = copy.deepcopy(board)
        self.rows = len(board)
        self.cols = len(board[0])
        self.best_move = None
        self.leaf = 0

    def get_board(self):
        return self.board

    def reset(self):
        self.board = [[False] * self.cols for _ in range(self.rows)]

    def is_legal_move(self, row, col, vertical):
        # Check if beyond bond
        # Check not filling any exiting grid
        if row >= self.rows or col >= self.cols or self.board[row][col]:
            return False
        if vertical:
            if row + 1 >= self.rows or self.board[row + 1][col]:
                return False
        else:
            if col + 1 >= self.cols or self.board[row][col + 1]:
                return False
        return True

    def legal_moves(self, vertical):
        for row in range(self.rows - vertical * 1):
            for col in range(self.cols - (not vertical) * 1):
                if self.is_legal_move(row, col, vertical):
                    yield row, col

    def get_legal_moves_list(self, vertical):
        return list(self.legal_moves(vertical))

    def perform_move(self, row, col, vertical):
        if self.is_legal_move(row, col, vertical):
            self.board[row][col] = True
            self.board[row + 1 * vertical][col + (not vertical) * 1] = True

    def game_over(self, vertical):
        if len(self.get_legal_moves_list(vertical)) == 0:
            return True
        else:
            return False

    def copy(self):
        return DominoesGame(copy.deepcopy(self.board))

    def successors(self, vertical):
        for row, col in self.legal_moves(vertical):
            new_domi = self.copy()
            new_domi.perform_move(row, col, vertical)
            yield (row, col), new_domi

    def get_random_move(self, vertical):
        (row, col) = (random.choice(list(self.legal_moves(vertical))))
        self.perform_move(row, col, vertical)

    def evaluate(self, vertical):
        MAX_eval = len(self.get_legal_moves_list(vertical))
        MIN_eval = len(self.get_legal_moves_list(not vertical))
        return MAX_eval - MIN_eval

    def minimax(self, root, limit, a, b, role, vertical):
        if self.game_over(vertical) or limit == 0:
            root.leaf += 1
            if role:
                return self.evaluate(vertical)
            else:
                return -self.evaluate(vertical)
        else:
            if role:
                # print("Recur for MAX")
                maxEval = -math.inf
                for move, new_domi in self.successors(vertical):
                    evaluation = new_domi.minimax(root, limit - 1,
                                                  a, b, False, not vertical)
                    # print("Eval is ", eval)
                    if evaluation > maxEval:
                        # print("Best move to assign is ", move)
                        maxEval = evaluation
                        self.best_move = move
                        a = max(a, maxEval)
                    if b <= a:
                        # print("break")
                        return maxEval
                return maxEval
            else:
                # print("Recur for MIN")
                minEval = math.inf
                for move, new_domi in self.successors(vertical):
                    evaluation = new_domi.minimax(root, limit - 1,
                                                  a, b, True, not vertical)
                    # print("Eval is ", eval)
                    if evaluation < minEval:
                        minEval = evaluation
                        # print("Best move to assign is ", move)
                        self.best_move = move
                        b = min(minEval, b)
                    if b <= a:
                        # print("break")
                        return minEval
               return minEval

    def get_best_move(self, vertical, limit):
        evaluation = self.minimax(self, limit, -math.inf,
                                  math.inf, True, vertical)
        return self.best_move, evaluation, self.leaf
